# Default values for fleetconfig-controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section FleetConfig Configuration

## @descriptionStart
## Configuration for the FleetConfig resource created on the Hub. By default, bootstraps the Hub cluster in hub-as-spoke mode.
## @descriptionEnd
fleetConfig:
  ## @param fleetConfig.enabled Whether to create a FleetConfig resource.
  enabled: true
  ## @param fleetConfig.timeout Timeout in seconds for all clusteradm operations, including init, accept, join, upgrade, etc.
  timeout: 300
  ## @param fleetConfig.logVerbosity Log verbosity. Valid values: 0-10, 0 is the least verbose, 10 is the most verbose.
  logVerbosity: 0
  ## @param fleetConfig.spokeAnnotations Global annotations to apply to all spoke clusters. If not present, the 'agent.open-cluster-management.io/' prefix is added to each key. Each annotation is added to klusterlet.spec.registrationConfiguration.clusterAnnotations on every spoke and subsequently to the ManagedClusters on the hub. Per-spoke annotations take precedence over the global annotations.
  spokeAnnotations: {}
  ## @descriptionStart
  ## ### Spoke Feature Gates
  ## Uncomment and configure `fleetConfig.spokeFeatureGates` to enable feature gates for the Klusterlet on each Spoke.
  ## Do not disable the feature gates that are enabled by default.
  ##
  ## Available Spoke Feature Gates:
  ## - **AddonManagement** (ALPHA - default=true) - Enables addon management functionality
  ## - **AllAlpha** (ALPHA - default=false) - Enables all alpha features
  ## - **AllBeta** (BETA - default=false) - Enables all beta features
  ## - **ClusterClaim** (ALPHA - default=true) - Enables cluster claim functionality
  ## - **ExecutorValidatingCaches** (ALPHA - default=false) - Enables executor validating caches
  ## - **RawFeedbackJsonString** (ALPHA - default=false) - Enables raw feedback JSON string support
  ## - **V1beta1CSRAPICompatibility** (ALPHA - default=false) - Enables v1beta1 CSR API compatibility
  ## @descriptionEnd
  spokeFeatureGates:
    ## @param fleetConfig.spokeFeatureGates.ClusterClaim ClusterClaim feature gate (ALPHA - default=true). Enables cluster claim functionality.
    ClusterClaim: true
    ## @param fleetConfig.spokeFeatureGates.RawFeedbackJsonString RawFeedbackJsonString feature gate (ALPHA - default=false). Enables raw feedback JSON string support.
    RawFeedbackJsonString: true
  ## Source bundle for the Cluster Manager and all Klusterlets.
  source:
    ## @param fleetConfig.source.bundleVersion Bundle version.
    bundleVersion: v1.0.0
    ## @param fleetConfig.source.registry Image registry.
    registry: quay.io/open-cluster-management
  ## @descriptionStart
  ## ### Registration Authentication Configuration
  ## Registration authentication configuration for FleetConfig setup. Uses certificate signing requests (CSR) by default.
  ## Available fields:
  ## - **driver**: The authentication driver to use (default: "csr"). Set to "awsirsa" to use AWS IAM Roles for Service Accounts (IRSA) for EKS FleetConfigs.
  ## - **hubClusterARN**: The ARN of the hub cluster (required for EKS FleetConfigs).
  ## - **autoApprovedARNPatterns**: Optional list of spoke cluster ARN patterns that the hub will auto approve.
  ## @descriptionEnd
  ## @param fleetConfig.registrationAuth.driver The authentication driver to use (default: "csr"). Set to "awsirsa" to use AWS IAM Roles for Service Accounts (IRSA) for EKS FleetConfigs.
  registrationAuth:
    # The driver used for authentication. Default is "csr".
    # If configuring an EKS FleetConfig, ensure this is set to "awsirsa".
    driver: "csr"
  #   # The ARN of the hub cluster. This is only required if configuring an EKS FleetConfig.
  #   hubClusterARN: "arn:aws:eks:us-west-2:<HUB_AWS_ACCOUNT_ID>:cluster/<HUB_CLUSTER_NAME>"
  #   # Optional list of spoke cluster name ARN patterns that the hub will auto approve
  #   autoApprovedARNPatterns: []
  ## Configuration for the Hub cluster.
  hub:
    ## Configuration for the Cluster Manager on the Hub cluster. Set to {} if using Singleton Control Plane.
    clusterManager:
      ## @descriptionStart
      ## ### Hub Cluster Manager Feature Gates
      ## Feature gates for the Hub's Cluster Manager. Do not disable the feature gates that are enabled by default.
      ##
      ## Available Hub Cluster Manager Feature Gates:
      ## - **AddonManagement** (ALPHA - default=true) - Enables addon management functionality
      ## - **AllAlpha** (ALPHA - default=false) - Enables all alpha features
      ## - **AllBeta** (BETA - default=false) - Enables all beta features
      ## - **CloudEventsDrivers** (ALPHA - default=false) - Enables cloud events drivers
      ## - **DefaultClusterSet** (ALPHA - default=false) - Enables default cluster set functionality
      ## - **ManagedClusterAutoApproval** (ALPHA - default=false) - Enables automatic managed cluster approval
      ## - **ManifestWorkReplicaSet** (ALPHA - default=false) - Enables manifest work replica set functionality
      ## - **NilExecutorValidating** (ALPHA - default=false) - Enables nil executor validation
      ## - **ResourceCleanup** (BETA - default=true) - Enables automatic resource cleanup
      ## - **V1beta1CSRAPICompatibility** (ALPHA - default=false) - Enables v1beta1 CSR API compatibility
      ## @descriptionEnd
      featureGates:
        ## @param fleetConfig.hub.clusterManager.featureGates.DefaultClusterSet DefaultClusterSet feature gate.
        DefaultClusterSet: true
        ## @param fleetConfig.hub.clusterManager.featureGates.ManifestWorkReplicaSet ManifestWorkReplicaSet feature gate.
        ManifestWorkReplicaSet: true
        ## @param fleetConfig.hub.clusterManager.featureGates.ResourceCleanup ResourceCleanup feature gate.
        ResourceCleanup: true
      ## @param fleetConfig.hub.clusterManager.purgeOperator If set, the cluster manager operator will be purged and the open-cluster-management namespace deleted when the FleetConfig CR is deleted.
      purgeOperator: true
      ## @param fleetConfig.hub.clusterManager.resources Resource specifications for all clustermanager-managed containers.
      resources: {}
        # # The resource limits of all the containers managed by the Cluster Manager or Klusterlet operators.
        # limits:
        #   # The number of CPU units to request, e.g., '800m'.
        #   cpu: ""
        #   # The amount of memory to request, e.g., '8Gi'.
        #   memory: ""
        # # The resource requests of all the containers managed by the Cluster Manager or Klusterlet operators.
        # requests:
        #   # The number of CPU units to request, e.g., '800m'.
        #   cpu: ""
        #   # The amount of memory to request, e.g., '8Gi'.
        #   memory: ""
        # # The resource QoS class of all the containers managed by the Cluster Manager or Klusterlet operators.
        # # Options: [ Default | BestEffort | ResourceRequirement ].
        # qosClass: "Default"
    ## @param fleetConfig.hub.createNamespace If true, create open-cluster-management namespace, otherwise use existing one.
    createNamespace: true
    ## @param fleetConfig.hub.force If set, the hub will be reinitialized.
    force: false
    ## @param fleetConfig.hub.apiServer The Hub cluster's API Server. Required when configuring an EKS, or GKE FleetConfig.
    apiServer: ""
    ## @param fleetConfig.hub.ca The Hub cluster's CA certificate. Optional.
    ca: ""
    ## Kubeconfig details for the Hub cluster.
    kubeconfig:
      ## @param fleetConfig.hub.kubeconfig.context The context to use in the kubeconfig file. Leave empty to use the current context.
      context: ""
      ## @param fleetConfig.hub.kubeconfig.inCluster If set, the kubeconfig will be read from the cluster. Only applicable for same-cluster operations.
      inCluster: true
      # ## @param fleetConfig.hub.kubeconfig.secretReference A reference to an existing secret containing a kubeconfig. Must be provided for remote clusters. For same-cluster, must be provided unless InCluster is set to true.
      # secretReference:
      #   ## @param fleetConfig.hub.kubeconfig.secretReference.name The name of the secret.
      #   name: ""
      #   ## @param fleetConfig.hub.kubeconfig.secretReference.namespace The namespace the secret is in.
      #   namespace: ""
      #   ## @param fleetConfig.hub.kubeconfig.secretReference.kubeconfigKey The map key to access the kubeconfig.
      #   kubeconfigKey: "kubeconfig"
    ## @descriptionStart
    ##
    ## ### Singleton Control Plane Configuration
    ## If provided, deploy a singleton control plane instead of Cluster Manager.
    ## To enable singleton mode, `fleetConfig.hub.clusterManager` must be commented out and `fleetConfig.hub.singletonControlPlane` must be uncommented and configured with the following options:
    ## - **name**: The name of the singleton control plane (default: "singleton-controlplane")
    ## - **helm**: Helm configuration for the multicluster-controlplane Helm chart
    ##   - **values**: Raw, YAML-formatted Helm values
    ##   - **set**: List of comma-separated Helm values (e.g., key1=val1,key2=val2)
    ##   - **setJson**: List of comma-separated Helm JSON values
    ##   - **setLiteral**: List of comma-separated Helm literal STRING values
    ##   - **setString**: List of comma-separated Helm STRING values
    ##
    ## Refer to the [Multicluster Controlplane configuration](https://github.com/open-cluster-management-io/multicluster-controlplane/blob/main/charts/multicluster-controlplane/values.yaml) for more details.
    ## @descriptionEnd
    # singletonControlPlane:
      ## The name of the singleton control plane.
      # name: "singleton-controlplane"
      ## Helm configuration for the multicluster-controlplane Helm chart.
      # helm:
        ## Raw, YAML-formatted Helm values.
        # values: ""
        ## List of comma-separated Helm values, e.g., key1=val1,key2=val2.
        # set: []
        ## List of comma-separated Helm JSON values, e.g., key1=jsonval1,key2=jsonval2.
        # setJson: []
        ## List of comma-separated Helm literal STRING values.
        # setLiteral: []
        ## List of comma-separated Helm STRING values, e.g., key1=val1,key2=val2.
        # setString: []
  ## Configuration for Spoke clusters.
  ## @param fleetConfig.spokes[0].name Name of the spoke cluster.
  ## @param fleetConfig.spokes[0].createNamespace If true, create open-cluster-management namespace and agent namespace (open-cluster-management-agent for Default mode, <klusterlet-name> for Hosted mode), otherwise use existing one. Do not edit this name if you are using the default hub-as-spoke mode.
  ## @param fleetConfig.spokes[0].syncLabels If true, sync the labels from klusterlet to all agent resources.
  ## @param fleetConfig.spokes[0].kubeconfig.context The context to use in the kubeconfig file. Leave empty to use the current context.
  ## @param fleetConfig.spokes[0].kubeconfig.inCluster If set, the kubeconfig will be read from the cluster. Only applicable for same-cluster operations.
  ## @param fleetConfig.spokes[0].proxyCa Proxy CA certificate, optional.
  ## @param fleetConfig.spokes[0].proxyUrl URL of a forward proxy server used by agents to connect to the Hub cluster, optional.
  ## @param fleetConfig.spokes[0].klusterlet.annotations Annotations to apply to the spoke cluster. If not present, the 'agent.open-cluster-management.io/' prefix is added to each key. Each annotation is added to klusterlet.spec.registrationConfiguration.clusterAnnotations on the spoke and subsequently to the ManagedCluster on the hub. These annotations take precedence over the global spoke annotations.
  ## @param fleetConfig.spokes[0].klusterlet.mode Deployment mode for klusterlet. Options: Default (agents run on spoke cluster) | Hosted (agents run on hub cluster).
  ## @param fleetConfig.spokes[0].klusterlet.purgeOperator If set, the klusterlet operator will be purged and all open-cluster-management namespaces deleted when the klusterlet is unjoined from its Hub cluster.
  ## @param fleetConfig.spokes[0].klusterlet.forceInternalEndpointLookup If true, the klusterlet agent will start the cluster registration process by looking for the
  ## @param fleetConfig.spokes[0].klusterlet.managedClusterKubeconfig External managed cluster kubeconfig, required if using hosted mode.
  ## @param fleetConfig.spokes[0].klusterlet.forceInternalEndpointLookupManaged If true, the klusterlet accesses the managed cluster using the internal endpoint from the public cluster-info in the managed cluster instead of using managedClusterKubeconfig.
  ## @param fleetConfig.spokes[0].klusterlet.resources Resource specifications for all klusterlet-managed containers.
  ## @param fleetConfig.spokes[0].klusterlet.singleton If true, deploy klusterlet in singleton mode, with registration and work agents running in a single pod. This is an alpha stage flag.
  spokes:
  - name: hub-as-spoke
    createNamespace: true
    syncLabels: false
    ## The ARN of the spoke cluster. This is only required if configuring an EKS FleetConfig.
    # clusterARN: "arn:aws:eks:us-west-2:<SPOKE_AWS_ACCOUNT_ID>:cluster/<SPOKE_CLUSTER_NAME>"
    ## Kubeconfig details for the Spoke cluster.
    kubeconfig:
      context: ""
      inCluster: true
      ## A reference to an existing secret containing a kubeconfig. Must be provided for remote clusters. For same-cluster, must be provided unless InCluster is set to true.
      # secretReference:
      #   ## @param fleetConfig.spokes[0].kubeconfig.secretReference.name The name of the secret.
      #   name: ""
      #   ## @param fleetConfig.spokes[0].kubeconfig.secretReference.namespace The namespace the secret is in.
      #   namespace: ""
      #   ## @param fleetConfig.spokes[0].kubeconfig.secretReference.kubeconfigKey The map key to access the kubeconfig.
      #   kubeconfigKey: "kubeconfig"
    proxyCa: ""
    proxyUrl: ""
    ## Configuration for the Klusterlet on the Spoke cluster.
    klusterlet:
      annotations: {}
      mode: "Default"
      purgeOperator: true
      # Reference the internal endpoint from the cluster-info ConfigMap in the Hub cluster instead of using the Hub's
      # public API server endpoint. Set to true when registering the hub cluster as a spoke.
      forceInternalEndpointLookup: true
      managedClusterKubeconfig: {}
        ## The context to use in the kubeconfig file.
        # context: ""
        ## If set, the kubeconfig will be read from the cluster. Only applicable for same-cluster operations.
        # inCluster: false
        ## A reference to an existing secret containing a kubeconfig. Must be provided for remote clusters. For same-cluster, must be provided unless InCluster is set to true.
        # secretReference:
        #   ## @param fleetConfig.spokes[0].klusterlet.managedClusterKubeconfig.secretReference.name The name of the secret.
        #   name: ""
        #   ## @param fleetConfig.spokes[0].klusterlet.managedClusterKubeconfig.secretReference.namespace The namespace the secret is in.
        #   namespace: ""
        #   ## @param fleetConfig.spokes[0].klusterlet.managedClusterKubeconfig.secretReference.kubeconfigKey The map key to access the kubeconfig.
        #   kubeconfigKey: "kubeconfig"
      forceInternalEndpointLookupManaged: false
      resources: {}
        # # The resource limits of all the containers managed by the Cluster Manager or Klusterlet operators.
        # limits:
        #   # The number of CPU units to request, e.g., '800m'.
        #   cpu: ""
        #   # The amount of memory to request, e.g., '8Gi'.
        #   memory: ""
        # # The resource requests of all the containers managed by the Cluster Manager or Klusterlet operators.
        # requests:
        #   # The number of CPU units to request, e.g., '800m'.
        #   cpu: ""
        #   # The amount of memory to request, e.g., '8Gi'.
        #   memory: ""
        # # The resource QoS class of all the containers managed by the Cluster Manager or Klusterlet operators.
        # # Options: [ Default | BestEffort | ResourceRequirement ].
        # qosClass: "Default"
      singleton: false
    # Add-on configuration for the spoke cluster.
    # ## @param fleetConfig.spokes[0].addOns[0].name Name of the add-on.
    # ## @param fleetConfig.spokes[0].addOns[0].installNamespace Namespace to install the add-on.
    # ## @param fleetConfig.spokes[0].addOns[0].annotations Annotations to apply to the add-on.
    # addOns:
    # - name: ""
    #   installNamespace: ""
    #   annotations: {}

  # Global add-on configuration for the hub cluster.
  # ## @param fleetConfig.addOnConfigs[0].name Name of the add-on.
  # ## @param fleetConfig.addOnConfigs[0].manifests Manifests to install. Can either be inline or a URL.
  # ## @param fleetConfig.addOnConfigs[0].version Version of the add-on.
  # ## @param fleetConfig.addOnConfigs[0].clusterRoleBinding Cluster role binding to apply to the add-on.
  # ## @param fleetConfig.addOnConfigs[0].hubRegistration Enable the agent to register to the hub cluster.
  # ## @param fleetConfig.addOnConfigs[0].overwrite Whether to overwrite the add-on if it already exists.
  # addOnConfigs:
  # - name: ""
  #   manifests: ""
  #   version: "v0.0.1"
  #   clusterRoleBinding: ""
  #   hubRegistration: false
  #   overwrite: false

## @section Topology Resources

## @param topologyResources.enabled Whether to create Namespaces and ManagedClusterSetBindings for the default ManagedClusterSets created when a FleetConfig is created with the DefaultClusterSet feature gate enabled. Additionally, a Namespace, ManagedClusterSet, and Placement are created for targeting all managed clusters that are not the hub running in hub-as-spoke mode.
topologyResources:
  enabled: true

## @section fleetconfig-controller parameters

## @param kubernetesProvider Kubernetes provider of the cluster that fleetconfig-controller will be installed on. Valid values are "Generic", "EKS", "GKE-Ingress".
kubernetesProvider: "Generic"

## @param replicas fleetconfig-controller replica count
replicas: 1

## @param imageRegistry Image registry
imageRegistry: ""

## @param image.repository Image repository
## @param image.tag Image tag
## @param image.pullPolicy Image pull policy
image:
  repository: quay.io/open-cluster-management/fleetconfig-controller
  tag: v0.0.7
  pullPolicy: IfNotPresent

## @param imagePullSecrets Image pull secrets
imagePullSecrets: []

## @param serviceAccount.annotations Annotations to add to the service account
serviceAccount:
  annotations: {}

## @skip podSecurityContext
podSecurityContext: {}
  # fsGroup: 2000

## @param containerSecurityContext.allowPrivilegeEscalation allowPrivilegeEscalation
## @param containerSecurityContext.capabilities.drop capabilities to drop
## @param containerSecurityContext.runAsNonRoot runAsNonRoot
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  # readOnlyRootFilesystem: true
  # runAsUser: 1000

## @param resources.limits.cpu fleetconfig controller's cpu limit
## @param resources.limits.memory fleetconfig controller's memory limit
## @param resources.requests.cpu fleetconfig controller's cpu request
## @param resources.requests.memory fleetconfig controller's memory request
resources:
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 256Mi

## @param healthCheck.port port the liveness & readiness probes are bound to
healthCheck:
  port: 9440

## @skip readinessProbe
readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 1

## @skip livenessProbe
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 90
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 1

## @param kubernetesClusterDomain kubernetes cluster domain
kubernetesClusterDomain: cluster.local

## @section cert-manager

## @param cert-manager.enabled Whether to install cert-manager.
cert-manager:
  enabled: true

  # Add any additional values to pass to the cert-manager Helm chart.
  # See: https://artifacthub.io/packages/helm/cert-manager/cert-manager

## @section certificates

## @param certificates.clusterIssuer.spec.selfSigned Use a self-signed ClusterIssuer by default.
## @param certificates.clusterIssuer.enabled Enable the creation of a ClusterIssuer.
## @param certificates.issuerRef.kind Kind of the certificate issuer to use.
## @param certificates.issuerRef.name Name of the certificate issuer to use.
certificates:
  clusterIssuer:
    enabled: true
    spec:
      selfSigned: {}
  issuerRef:
    kind: ClusterIssuer
    name: fleetconfig-controller

## @section webhook parameters

## @param admissionWebhooks.enabled enable admission webhooks
## @param admissionWebhooks.failurePolicy admission webhook failure policy
## @param admissionWebhooks.certificate.mountPath admission webhook certificate mount path
## @param admissionWebhooks.certManager.revisionHistoryLimit cert-manager revision history limit
admissionWebhooks:
  enabled: true
  failurePolicy: Fail
  certificate:
    mountPath: /etc/k8s-webhook-certs
  certManager:
    revisionHistoryLimit: 3

## @param webhookService.type webhook service type
## @param webhookService.port webhook service port
webhookService:
  type: ClusterIP
  port: 9443

## @section dev parameters

## @param devspaceEnabled devspace enabled
devspaceEnabled: false

## @param fullnameOverride Fullname override
fullnameOverride: fleetconfig-controller
